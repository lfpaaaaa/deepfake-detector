name: CI Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  # Code quality checks
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        if [ -f configs/requirements.txt ]; then pip install -r configs/requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ tools/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app/ tools/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check app/ tools/ || echo "Code formatting check completed"
    
    - name: Check import sorting with isort
      run: |
        isort --check-only app/ tools/ || echo "Import sorting check completed"

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'  # Don't fail the build on vulnerabilities
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image (without model weights)
      run: |
        # Create dummy model file for testing
        touch trufor.pth.tar
        docker build . --file Dockerfile --tag deepfake-detector:test
    
    - name: Test Docker image
      run: |
        docker run --rm deepfake-detector:test python --version
        docker run --rm deepfake-detector:test pip list | grep fastapi

  # Python unit tests (if tests exist)
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio
        if [ -f configs/requirements.txt ]; then pip install -r configs/requirements.txt; fi
    
    - name: Run tests
      run: |
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        else
          echo "No tests directory found, skipping tests"
        fi
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Configuration validation
  config-check:
    name: Configuration Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check required files exist
      run: |
        echo "Checking required configuration files..."
        [ -f "Dockerfile" ] && echo "✓ Dockerfile exists" || exit 1
        [ -f "docker-compose.yml" ] && echo "✓ docker-compose.yml exists" || exit 1
        [ -f "configs/requirements.txt" ] && echo "✓ requirements.txt exists" || exit 1
        [ -f ".gitignore" ] && echo "✓ .gitignore exists" || exit 1
        [ -f ".dockerignore" ] && echo "✓ .dockerignore exists" || exit 1
    
    - name: Validate YAML files
      run: |
        python -m pip install pyyaml
        python -c "import yaml; yaml.safe_load(open('docker-compose.yml'))" && echo "✓ docker-compose.yml is valid"
        python -c "import yaml; yaml.safe_load(open('configs/config.yaml'))" && echo "✓ config.yaml is valid"
    
    - name: Check for sensitive data
      run: |
        echo "Checking for potential sensitive data..."
        ! grep -r "password.*=.*['\"]" --include="*.py" --include="*.js" app/ || echo "⚠️ Found potential hardcoded passwords"
        ! grep -r "api[_-]key.*=.*['\"]" --include="*.py" --include="*.js" app/ || echo "⚠️ Found potential hardcoded API keys"
        echo "Security check completed"

  # Summary
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, security, docker-build, test, config-check]
    if: always()
    
    steps:
    - name: Check CI results
      run: |
        echo "All CI checks completed!"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Config Check: ${{ needs.config-check.result }}"

